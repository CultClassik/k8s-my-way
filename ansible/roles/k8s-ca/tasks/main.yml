---
- name: Gather instance facts
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  loop: "{{ groups['k8s_controller'] | union(groups['k8s_node']) | union(groups['k8s_etcd']) }}"

- name: Get hosts for Kubernetes API cert
  set_fact:
    k8sApiHosts: >-
      {% set comma = joiner(",") %}{% for item in groups['k8s_controller'] -%}
        {{ comma() }}{{ hostvars[item]["ansible_"+hostvars[item]["public_if"]].ipv4.address }}{{ comma() }}{{ hostvars[item]["ansible_"+hostvars[item]["private_if"]].ipv4.address }}{{ comma() }}{{ item }}
      {%- endfor %},127.0.0.1,kubernetes.default

- name: Output of hostnames/IPs used for Kubernetes API server certificate
  debug: var=k8sApiHosts

- name: Get hosts for Kubernetes etcd cert
  set_fact:
    k8sEtcdHosts: >-
      {% set comma = joiner(",") %}{% for item in groups['k8s_etcd'] -%}
        {{ comma() }}{{ hostvars[item]["ansible_"+hostvars[item]["public_if"]].ipv4.address }}{{ comma() }}{{ hostvars[item]["ansible_"+hostvars[item]["private_if"]].ipv4.address }}{{ comma() }}{{ item }}
      {%- endfor %}

- name: Output of hostnames/IPs used for Kubernetes etcd server certificate
  debug: var=k8sEtcdHosts

- name: Download cfssl binaries
  include_role:
    name: githubixx.cfssl

- name: Create dir for cert storage
  file:
    path: "{{ cert_dir }}"
    state: directory
    recurse: yes
    mode: "770"
    owner: "{{ local_id }}"
    group: "{{ local_id }}"

# CA
- name: Create CA config
  template:
    src: ca-config.j2
    dest: "{{ cert_dir }}/ca-config.json"

- name: Create generic CSRs
  template:
    src: generic-csr.j2
    dest: "{{ cert_dir }}/{{ item.name }}-csr.json"
  vars:
    CN: "{{ item.cn }}"
    names_o: "{{ item.o }}"
  loop: "{{ csrs }}"

# Controller-Manager
- name: Generate cert for Contoller Manager
  shell: "cfssl gencert -initca {{ cert_dir }}/ca-csr.json | cfssljson -bare ca"
  args:
    chdir: "{{ cert_dir }}"
    creates: "{{ cert_dir }}/ca.pem"
  vars:
    names_o: "Kubernetes"

# ADMIN
- name: Generate cert for Admin
  shell: >
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    admin-csr.json | sudo cfssljson -bare admin
  args:
    chdir: "{{ cert_dir }}"
    creates: "{{ cert_dir }}/admin.pem"

# KUBELET CLIENTS
- name: Create CSR for Kubelet Clients
  template:
    src: generic-csr.j2
    dest: "{{ cert_dir }}/kubelet-client-{{ item }}-csr.json"
  loop: "{{ groups['k8s_node'] }}"
  vars:
    CN: "system:node:{{ item }}"
    names_o: "system:nodes"   

- name: Generate certs for Kubelet Clients
  shell: >
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -hostname={{ item }},{{ hostvars[item]["ansible_"+hostvars[item]["private_if"]].ipv4.address }},{{ hostvars[item].ansible_default_ipv4.address }} \
    -profile=kubernetes \
    kubelet-client-{{ item }}-csr.json | cfssljson -bare {{ item }}
  loop: "{{ groups['k8s_node'] }}"
  args:
    chdir: "{{ cert_dir }}"

# KUBE CONTROLLER MANAGER
- name: Generate cert for Contoller Manager
  shell: >
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
  args:
    chdir: "{{ cert_dir }}"

# KUBE PROXY
- name: Generate cert for Kube Proxy
  shell: >
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    kube-proxy-csr.json | cfssljson -bare kube-proxy
  args:
    chdir: "{{ cert_dir }}"

# SCHEDULER
- name: Generate cert for Scheduler
  shell: >
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    scheduler-csr.json | cfssljson -bare scheduler
  args:
    chdir: "{{ cert_dir }}"

# SERVICE ACCOUNT KEY PAIR
- name: Generate cert for Service Account Keypair
  shell: >
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    service-account-keypair-csr.json | cfssljson -bare service-account
  args:
    chdir: "{{ cert_dir }}"

# API SERVER
- name: Create CSR for API Server
  template:
    src: generic-csr.j2
    dest: "{{ cert_dir }}/kubernetes-csr.json"
  vars:
    CN: kubernetes
    names_o: Kubernetes The Hard Way

- name: Generate cert for API Server
  shell: >
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    -hostname={{ k8sApiHosts }},127.0.0.1,kubernetes.default \
    kubernetes-csr.json | cfssljson -bare kubernetes
  args:
    chdir: "{{ cert_dir }}"

# ETCD
- name: Create CSR for etcd
  template:
    src: generic-csr.j2
    dest: "{{ cert_dir }}/etcd-csr.json"
  vars:
    CN: etcd
    o: Kubernetes The Hard Way

- name: Generate cert for etcd
  shell: >
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -profile=kubernetes \
    -hostname={{ k8sEtcdHosts }} \
    etcd-csr.json | cfssljson -bare etcd
  args:
    chdir: "{{ cert_dir }}"

#- name: Set perms on all cert files
#  file:
#    path: "{{ cert_dir }}"
#    owner: "{{ local_id }}"
#    group: "{{ local_id }}"
#    recurse: yes

- name: Fix perms
  shell:
    cmd: "{{ item }}"
  args:
    chdir: "{{ cert_dir }}"
  loop:
    - chmod -R 770 ./*
    - chown -R {{local_id}}:{{local_id}} ./*